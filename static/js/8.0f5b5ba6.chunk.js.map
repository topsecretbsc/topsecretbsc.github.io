{"version":3,"sources":["hooks/useBlock.ts","utils/erc20.ts","utils/formatBalance.ts","components/UnlockButton.tsx","hooks/useApprove.ts","hooks/useTokenBalance.ts","hooks/useIsMember.ts","views/Enigma/index.tsx"],"names":["useBlock","useContext","BlockContext","getContract","provider","address","Web3","eth","Contract","erc20","getAllowance","lpContract","masterChefContract","account","a","methods","allowance","options","call","getTokenBalance","tokenAddress","userAddress","contract","balanceOf","balance","getBalanceNumber","decimals","displayBalance","BigNumber","dividedBy","pow","toNumber","getFullDisplayBalance","toFixed","UnlockButton","props","useWallet","connect","reset","onPresentConnectModal","useWalletModal","onClick","useAllowance","useState","isApproved","setIsApproved","block","useEffect","then","x","isGreaterThan","useApprove","amount","dispatch","useDispatch","useMasterchef","onApprove","useCallback","approve","tx","fetchFarmUserDataAsync","console","error","useContractApprove","useTokenBalanceAccount","setBalance","ethereum","res","fetchBalance","useTotalSupply","slowRefresh","useRefresh","totalSupply","setTotalSupply","cakeContract","cakeABI","getTokenAddress","supply","fetchTotalSupply","useBurnedBalance","useTokenBalance","useIsWinner","undefined","val","setVal","useMasterEnigma","getUserLastResult","useIsMember","fastRefresh","isMember","from","Hero","styled","div","Cards","BaseLayout","theme","mediaQueries","sm","lg","StyledCard","Card","BalanceFlex","label","justifyContent","mb","bold","textTransform","color","fontSize","pr","Enigma","React","requestedApproval","setRequestedApproval","betResult","token","getYieldTokenAddress","tokenContract","useERC20","machineAddress","getMasterEnigmaAddress","machineContract","machineBalance","playEnigma","handleApprove","size","Date","parseInt","toLocaleString","mt","fullWidth","disabled"],"mappings":"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","file":"static/js/8.0f5b5ba6.chunk.js","sourcesContent":["import { useContext } from 'react'\nimport { BlockContext } from 'contexts/BlockContext'\n\nconst useBlock = () => {\n  const block: number = useContext(BlockContext)\n  return block\n}\n\nexport default useBlock\n","import Web3 from 'web3'\nimport { provider as ProviderType } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport erc20 from 'config/abi/erc20.json'\n\nexport const getContract = (provider: ProviderType, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\n  return contract\n}\n\nexport const getAllowance = async (\n  lpContract: Contract,\n  masterChefContract: Contract,\n  account: string,\n): Promise<string> => {\n  try {\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\n    return allowance\n  } catch (e) {\n    return '0'\n  }\n}\n\nexport const getTokenBalance = async (\n  provider: ProviderType,\n  tokenAddress: string,\n  userAddress: string,\n): Promise<string> => {\n  const contract = getContract(provider, tokenAddress)\n  try {\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\n    return balance\n  } catch (e) {\n    return '0'\n  }\n}\n","import BigNumber from 'bignumber.js'\n\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\n  const displayBalance = new BigNumber(balance).dividedBy(new BigNumber(10).pow(decimals))\n  return displayBalance.toNumber()\n}\n\nexport const getBalanceBig = (balance: BigNumber, decimals = 18) => {\n  const displayBalance = new BigNumber(balance).dividedBy(new BigNumber(10).pow(decimals))\n  return displayBalance\n}\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18) => {\n  return balance.dividedBy(new BigNumber(10).pow(decimals)).toFixed()\n}\n","import React from 'react'\nimport { Button, useWalletModal } from 'uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\n\nconst UnlockButton = (props) => {\n  const { connect, reset } = useWallet()\n  const { onPresentConnectModal } = useWalletModal(connect, reset)\n\n  return (\n    <Button onClick={onPresentConnectModal} {...props}>\n      Unlock Wallet\n    </Button>\n  )\n}\n\nexport default UnlockButton\n","import { useCallback, useState, useEffect } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { useDispatch } from 'react-redux'\nimport { updateUserAllowance } from 'state/actions'\nimport { getAllowance } from 'utils/erc20'\nimport { approve } from 'utils/callHelpers'\nimport BigNumber from 'bignumber.js'\nimport { fetchFarmUserDataAsync } from '../state/farms'\nimport { useMasterchef, useSousChef } from './useContract'\nimport useBlock from './useBlock'\n\nexport const useAllowance = (lpContract: Contract, contract: Contract) => {\n  const [isApproved, setIsApproved] = useState(false)\n  const { account }: { account: string } = useWallet()\n  const block = useBlock()\n\n  useEffect(() => {\n    if (isApproved) return\n    getAllowance(lpContract, contract, account).then((x) => {\n      if (!account) return\n      const allowance = new BigNumber(x)\n      setIsApproved(allowance && allowance.isGreaterThan(0))\n    })\n  }, [account, contract, lpContract, block, isApproved])\n\n  return isApproved\n}\n\nexport const useApprove = (lpContract: Contract, amount?: BigNumber) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const masterChefContract = useMasterchef()\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account, amount)\n\n      if (!amount)\n        dispatch(fetchFarmUserDataAsync(account))\n\n      return tx\n    } catch (e) {\n      console.error(e)\n      return false\n    }\n  }, [account, dispatch, lpContract, masterChefContract, amount])\n\n  return { onApprove: handleApprove }\n}\n\nexport const useContractApprove = (lpContract: Contract, contract: Contract) => {\n  const { account }: { account: string } = useWallet()\n  const handleApprove = useCallback(async () => {\n    try {\n      return await approve(lpContract, contract, account)\n    } catch (e) {\n      console.error(e)\n      return false\n    }\n  }, [account, lpContract, contract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, sousChefContract, account)\n      dispatch(updateUserAllowance(sousId, account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\n\n  return { onApprove: handleApprove }\n}\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getTokenAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\nimport useBlock from './useBlock'\n\nexport const useTokenBalanceAccount = (tokenAddress: string, account: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { ethereum }: { ethereum: provider } = useWallet()\n  const block = useBlock()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, block])\n\n  return balance\n}\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const block = useBlock()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, block])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getTokenAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, '0x000000000000000000000000000000000000dEaD')\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import { useEffect, useState } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { useMasterchef, useMasterEnigma } from './useContract'\r\nimport useRefresh from './useRefresh'\r\nimport useBlock from './useBlock'\r\n\r\nconst useIsMember = () => {\r\n  const [val, setVal] = useState(false)\r\n  const { account }: { account: string } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n  const masterChefContract = useMasterchef()\r\n  useEffect(() => {\r\n    if (account && !val) masterChefContract.methods.isMember().call({ from: account }).then(setVal)\r\n  }, [account, val, masterChefContract, fastRefresh])\r\n  return [val]\r\n}\r\n\r\nexport const useIsWinner = () => {\r\n  const [val, setVal] = useState(undefined)\r\n  const { account }: { account: string } = useWallet()\r\n  const block = useBlock()\r\n\r\n  const contract = useMasterEnigma()\r\n  useEffect(() => {\r\n    if (account) contract.methods.getUserLastResult(account).call().then(setVal)\r\n  }, [account, contract, block])\r\n  return val\r\n}\r\n\r\nexport default useIsMember\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { BaseLayout, Heading, Card, CardBody, Flex, Text, Button } from 'uikit'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport Page from 'components/layout/Page'\r\nimport useTokenBalance, { useTokenBalanceAccount } from 'hooks/useTokenBalance'\r\nimport { getMasterEnigmaAddress, getYieldTokenAddress } from 'utils/addressHelpers'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { useIsWinner } from 'hooks/useIsMember'\r\nimport { useAllowance, useContractApprove } from 'hooks/useApprove'\r\nimport { useERC20, useMasterEnigma } from 'hooks/useContract'\r\nimport { playEnigma } from 'utils/callHelpers'\r\n\r\nconst Hero = styled.div`\r\n  align-items: center;\r\n  background-image: url('/images/enigma.png');\r\n  background-repeat: no-repeat;\r\n  background-position: center;\r\n  background-size: contain;\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  margin: auto;\r\n  margin-bottom: 32px;\r\n  padding-top: 116px;\r\n  text-align: center;\r\n  min-height: 200px;\r\n`\r\n\r\nconst Cards = styled(BaseLayout)`\r\n  align-items: stretch;\r\n  justify-content: stretch;\r\n  margin-bottom: 48px;\r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n    width: 100%;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    & > div {\r\n      grid-column: span 6;\r\n    }\r\n  }\r\n`\r\n\r\nconst StyledCard = styled(Card)`\r\n  min-height: 200px;\r\n`\r\n\r\nconst BalanceFlex: React.FC<any> = ({ label, balance }) => (\r\n  <Flex justifyContent=\"space-between\" mb=\"24px\">\r\n    <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"18px\" pr=\"3px\">\r\n      {label}\r\n    </Text>\r\n    <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"18px\">\r\n      {getBalanceNumber(balance)}\r\n    </Text>\r\n  </Flex>\r\n)\r\n\r\nconst Enigma: React.FC = () => {\r\n  const [requestedApproval, setRequestedApproval] = React.useState(false)\r\n  const { account }: { account: string } = useWallet()\r\n  const betResult = useIsWinner()\r\n  const token = getYieldTokenAddress()\r\n  const tokenContract = useERC20(token)\r\n  const machineAddress = getMasterEnigmaAddress()\r\n  const machineContract = useMasterEnigma()\r\n  const balance = useTokenBalance(token)\r\n  const machineBalance = useTokenBalanceAccount(token, machineAddress)\r\n  const isApproved = useAllowance(tokenContract, machineContract)\r\n\r\n  const onClick = async () => {\r\n    try {\r\n        setRequestedApproval(true)\r\n        await playEnigma(machineContract, account)\r\n        setRequestedApproval(false)\r\n      } catch (e) {\r\n        console.error(e)\r\n      }\r\n  }\r\n\r\n  const { onApprove } = useContractApprove(tokenContract, machineContract)\r\n\r\n  const handleApprove = React.useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove])\r\n\r\n  return (\r\n    <Page>\r\n      <Hero />\r\n      <div>\r\n        <Cards>\r\n          <StyledCard>\r\n            <CardBody>\r\n              <Heading size=\"lg\" mb=\"24px\">\r\n                Enigma Machine\r\n              </Heading>\r\n              <p>\r\n                Test your luck. Enter <b>one A010</b> and get a chance to win <b>3X.</b>\r\n              </p>\r\n              <br />\r\n              <p>Try to figure out how the Enigma machine works. Reverse engineer the machine and get more rewards.</p>\r\n            </CardBody>\r\n          </StyledCard>\r\n\r\n          <StyledCard>\r\n            <CardBody>\r\n              <Heading size=\"lg\" mb=\"24px\">\r\n                Bet A010\r\n              </Heading>\r\n              {account ? (\r\n                <>\r\n                  <BalanceFlex label=\"Agent Balance\" balance={balance} />\r\n                  <BalanceFlex label=\"Enigma Balance\" balance={machineBalance} />\r\n                  {betResult && betResult[1] !== '0' && (\r\n                    <Flex justifyContent=\"space-between\" mb=\"24px\">\r\n                      <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"18px\" pr=\"3px\">\r\n                        Your last bet ({new Date(parseInt(`${betResult[1]}000`)).toLocaleString()})\r\n                      </Text>\r\n                      <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"18px\">\r\n                        {betResult[0] ? 'WINNER' : 'LOSER'}\r\n                      </Text>\r\n                    </Flex>\r\n                  )}\r\n                  {isApproved ? (\r\n                    <Button mt=\"8px\" fullWidth disabled={requestedApproval} onClick={onClick}>\r\n                      Play a Bet\r\n                    </Button>\r\n                  ) : (\r\n                    <Button mt=\"8px\" fullWidth disabled={requestedApproval} onClick={handleApprove}>\r\n                      Approve Contract\r\n                    </Button>\r\n                  )}\r\n                </>\r\n              ) : (\r\n                <UnlockButton fullWidth />\r\n              )}\r\n            </CardBody>\r\n          </StyledCard>\r\n        </Cards>\r\n      </div>\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Enigma\r\n"],"sourceRoot":""}